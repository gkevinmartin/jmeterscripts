<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
      <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
        <boolProp name="LoopController.continue_forever">false</boolProp>
        <stringProp name="LoopController.loops">1</stringProp>
      </elementProp>
      <stringProp name="ThreadGroup.num_threads">1</stringProp>
      <stringProp name="ThreadGroup.ramp_time">1</stringProp>
      <longProp name="ThreadGroup.start_time">1415635571000</longProp>
      <longProp name="ThreadGroup.end_time">1415635571000</longProp>
      <boolProp name="ThreadGroup.scheduler">false</boolProp>
      <stringProp name="ThreadGroup.duration"></stringProp>
      <stringProp name="ThreadGroup.delay"></stringProp>
    </ThreadGroup>
    <hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get on Account" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">breck-stage-svc.logicnow.us</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/api/policies?remoteAccountID=StressTest&amp;page=0&amp;start=0&amp;limit=1000</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">basic M19icmVjay1kZXYtbWF4LWFwaS1zaW0ubG9naWNub3cudXNfU3RyZXNzVGVzdDplNzk1ZDdjMGJjYjMxYjIyZDAzMWJkYmIxZjUwYmQ2ZA==</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
          <stringProp name="VAR">myPolicy</stringProp>
          <stringProp name="JSONPATH">$.results[0].PolicyID</stringProp>
          <stringProp name="DEFAULT">NO_VALUE</stringProp>
        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
        <hashTree/>
      </hashTree>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
        <stringProp name="maximumValue">999999999</stringProp>
        <stringProp name="minimumValue">0</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">guid</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post new Client" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
&quot;PolicyID&quot;: ${myPolicy},&#xd;
&quot;deviceGUID&quot;: &quot;${guid}&quot;,&#xd;
&quot;SiteConcentratorServer&quot;: &quot;5&quot;,&#xd;
&quot;SiteConcentratorPort&quot;: 0&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">breck-stage-svc.logicnow.us/api</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">Agents?policyID=${myPolicy}&amp;page=00&amp;start=0&amp;limit=1000</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">basic M19icmVjay1kZXYtbWF4LWFwaS1zaW0ubG9naWNub3cudXNfU3RyZXNzVGVzdDplNzk1ZDdjMGJjYjMxYjIyZDAzMWJkYmIxZjUwYmQ2ZA==</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
          <stringProp name="VAR">myAgent</stringProp>
          <stringProp name="JSONPATH">$.AgentID</stringProp>
          <stringProp name="DEFAULT">NO_VALUE</stringProp>
        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
        <hashTree/>
        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
          <stringProp name="VAR">encKey</stringProp>
          <stringProp name="JSONPATH">$.EncKey</stringProp>
          <stringProp name="DEFAULT">NO_VALUE</stringProp>
        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
        <hashTree/>
        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
          <stringProp name="VAR">agentKey</stringProp>
          <stringProp name="JSONPATH">$.AgentKey</stringProp>
          <stringProp name="DEFAULT">NO_VALUE</stringProp>
        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
        <hashTree/>
      </hashTree>
      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
        <stringProp name="BeanShellSampler.query">import java.security.*;
import org.apache.commons.codec.binary.Hex;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;

log.info(&quot;agent: &quot; + &quot;${agentKey}&quot;);
log.info(&quot;enc: &quot; + &quot;${encKey}&quot;);

String hd;
final String message = (&quot;${agentKey}&quot; + &quot;_&quot; + &quot;${encKey}&quot;);
final MessageDigest md5 = MessageDigest.getInstance( &quot;MD5&quot; );
md5.update(message.getBytes(&quot;utf-16le&quot;) );
final BigInteger hash = new BigInteger( 1, md5.digest() );

hd = hash.toString(16); // BigInteger strips leading 0&apos;s

// pad with leading 0&apos;s
while ( hd.length() &lt; 32 ) {
  hd = &quot;0&quot; + hd; 
}

log.info(hd);
String auth = &quot;${agentKey}:&quot;+hd;
log.info(auth);

byte[] agentAuth1 = Base64.encodeBase64(auth.getBytes());
log.info(&quot;basic &quot; + new String(agentAuth1));
String agentAuth = &quot;basic &quot; + new String(agentAuth1);
log.info(agentAuth)




</stringProp>
        <stringProp name="BeanShellSampler.filename"></stringProp>
        <stringProp name="BeanShellSampler.parameters"></stringProp>
        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
      </BeanShellSampler>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent State update" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;AgentID&quot;: ${myAgent},&#xd;
    &quot;PolicyID&quot;: ${myPolicy},&#xd;
    &quot;AgentState&quot;: 1,&#xd;
    &quot;ID&quot;: ${myAgent},&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">breck-stage-svc.logicnow.us/api</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">Agents/${myAgent}</stringProp>
        <stringProp name="HTTPSampler.method">PUT</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
import java.security.*;
import org.apache.commons.codec.binary.Hex;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;

log.info(&quot;agent: &quot; + vars.get(&quot;agentKey&quot;));
log.info(&quot;enc: &quot; + &quot;${encKey}&quot;);

String hd;
final String message = (&quot;${agentKey}&quot; + &quot;_&quot; + &quot;${encKey}&quot;);
final MessageDigest md5 = MessageDigest.getInstance( &quot;MD5&quot; );
md5.update(message.getBytes(&quot;utf-16le&quot;) );
final BigInteger hash = new BigInteger( 1, md5.digest() );

hd = hash.toString(16); // BigInteger strips leading 0&apos;s

// pad with leading 0&apos;s
while ( hd.length() &lt; 32 ) {
  hd = &quot;0&quot; + hd; 
}

log.info(hd);
String auth = &quot;${agentKey}:&quot;+hd;
log.info(auth);

byte[] agentAuth1 = Base64.encodeBase64(auth.getBytes());
log.info(&quot;basic &quot; + new String(agentAuth1));
String agentAuth = &quot;basic &quot; + new String(agentAuth1);
log.info(agentAuth);

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, agentAuth));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Scan Results" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;ScanResultID&quot;: 0,&#xd;
    &quot;AgentID&quot;: ${myAgent},&#xd;
    &quot;ScanStatus&quot;: 0,&#xd;
    &quot;ScanType&quot;: 2,&#xd;
    &quot;StartDate&quot;: &quot;2014-11-02T23:29:56.8506289+00:00&quot;,&#xd;
    &quot;EndDate&quot;: &quot;2014-11-02T23:29:56.8506289+00:00&quot;,&#xd;
    &quot;FilesScanned&quot;: 4,&#xd;
    &quot;FilesInfected&quot;: 5,&#xd;
    &quot;FilesSuspicious&quot;: 6,&#xd;
    &quot;FilesResolved&quot;: 7,&#xd;
    &quot;ProcessesScanned&quot;: 8,&#xd;
    &quot;ProcessesInfected&quot;: 9,&#xd;
    &quot;ProcessesSuspicious&quot;: 10,&#xd;
    &quot;ProcessesResolved&quot;: 11,&#xd;
    &quot;RegistryKeysScanned&quot;: 12,&#xd;
    &quot;RegistryKeysInfected&quot;: 13,&#xd;
    &quot;RegistryKeysSuspicious&quot;: 14,&#xd;
    &quot;RegistryKeysResolved&quot;: 15,&#xd;
    &quot;CookiesScanned&quot;: 16,&#xd;
    &quot;CookiesInfected&quot;: 17,&#xd;
    &quot;CookiesSuspicious&quot;: 18,&#xd;
    &quot;CookiesResolved&quot;: 19,&#xd;
    &quot;StreamsScanned&quot;: 20,&#xd;
    &quot;StreamsInfected&quot;: 21,&#xd;
    &quot;StreamsSuspicious&quot;: 22,&#xd;
    &quot;StreamsResolved&quot;: 23,&#xd;
    &quot;ID&quot;: 0&#xd;
    }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">breck-stage-svc.logicnow.us/api</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">ScanResults</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
import java.security.*;
import org.apache.commons.codec.binary.Hex;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;

log.info(&quot;agent: &quot; + vars.get(&quot;agentKey&quot;));
log.info(&quot;enc: &quot; + &quot;${encKey}&quot;);

String hd;
final String message = (&quot;${agentKey}&quot; + &quot;_&quot; + &quot;${encKey}&quot;);
final MessageDigest md5 = MessageDigest.getInstance( &quot;MD5&quot; );
md5.update(message.getBytes(&quot;utf-16le&quot;) );
final BigInteger hash = new BigInteger( 1, md5.digest() );

hd = hash.toString(16); // BigInteger strips leading 0&apos;s

// pad with leading 0&apos;s
while ( hd.length() &lt; 32 ) {
  hd = &quot;0&quot; + hd; 
}

log.info(hd);
String auth = &quot;${agentKey}:&quot;+hd;
log.info(auth);

byte[] agentAuth1 = Base64.encodeBase64(auth.getBytes());
log.info(&quot;basic &quot; + new String(agentAuth1));
String agentAuth = &quot;basic &quot; + new String(agentAuth1);
log.info(agentAuth);

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, agentAuth));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update defs" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;AgentCommandID&quot;: 0,&#xd;
    &quot;AgentID&quot;: ${myAgent},&#xd;
    &quot;AgentCommandTypeID&quot;: 8,&#xd;
    &quot;CommandArguments&quot;: &quot;sample argument&quot;,&#xd;
    &quot;AckStatus&quot;: 1,&#xd;
    &quot;CommandSuccessful&quot;: true,&#xd;
    &quot;CommandErrorCode&quot;: 0,&#xd;
    &quot;CommandError&quot;: &quot;sample error&quot;,&#xd;
    &quot;ResponseDetails&quot;: &quot;sample response&quot;,&#xd;
    &quot;ID&quot;: 0,&#xd;
 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">breck-stage-svc.logicnow.us/api</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">AgentCommands</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
import java.security.*;
import org.apache.commons.codec.binary.Hex;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;

log.info(&quot;agent: &quot; + vars.get(&quot;agentKey&quot;));
log.info(&quot;enc: &quot; + &quot;${encKey}&quot;);

String hd;
final String message = (&quot;${agentKey}&quot; + &quot;_&quot; + &quot;${encKey}&quot;);
final MessageDigest md5 = MessageDigest.getInstance( &quot;MD5&quot; );
md5.update(message.getBytes(&quot;utf-16le&quot;) );
final BigInteger hash = new BigInteger( 1, md5.digest() );

hd = hash.toString(16); // BigInteger strips leading 0&apos;s

// pad with leading 0&apos;s
while ( hd.length() &lt; 32 ) {
  hd = &quot;0&quot; + hd; 
}

log.info(hd);
String auth = &quot;${agentKey}:&quot;+hd;
log.info(auth);

byte[] agentAuth1 = Base64.encodeBase64(auth.getBytes());
log.info(&quot;basic &quot; + new String(agentAuth1));
String agentAuth = &quot;basic &quot; + new String(agentAuth1);
log.info(agentAuth);

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, agentAuth));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugSampler>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
